openapi: 3.0.1
info:
  description: Example REST API for working with employees
  title: Employees
  version: 1.0.0-SNAPSHOT
servers:
  - url: /
paths:
  /codebooks/{codebookCode}:
    get:
      description: Obtains a list of `CodebookItem`s. The list is sorted by `order`.
      operationId: getCodebookItems
      parameters:
        - description: Codebook code
          explode: false
          in: path
          name: codebookCode
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CodebookItem"
                type: array
          description: Successful response
      summary: Obtains a list of items of a codebook
      x-eov-operation-handler: controllers/DefaultController
  /employees:
    get:
      description: Obtains a list of `Employee`s. The list is sorted by `lastName`
        and then by `firstName`.
      operationId: getEmployees
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Employee"
                type: array
          description: Successful response
      summary: Obtains a list of employees
      x-eov-operation-handler: controllers/DefaultController
    post:
      description: Creates a `Employee`.
      operationId: postEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        description: Employee
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: Successful response
      summary: Creates a employee
      x-codegen-request-body-name: employee
      x-eov-operation-handler: controllers/DefaultController
  /employees/{employeeId}:
    delete:
      description: Deletes a `Employee`.
      operationId: deleteEmployee
      parameters:
        - description: Employee id
          explode: false
          in: path
          name: employeeId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "204":
          description: Description
      summary: Deletes a employee
      x-eov-operation-handler: controllers/DefaultController
    get:
      description: Obtains a `Employee` by its id.
      operationId: getEmployee
      parameters:
        - description: Employee id
          explode: false
          in: path
          name: employeeId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
          description: Successful response
        "404":
          description: When the employee cannot be found
      summary: Obtains a employee
      x-eov-operation-handler: controllers/DefaultController
    put:
      description: Saves a `Employee`.
      operationId: putEmployee
      parameters:
        - description: Employee id
          explode: false
          in: path
          name: employeeId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        description: Employee
        required: true
      responses:
        "204":
          description: Successful response
      summary: Saves a employee
      x-codegen-request-body-name: employee
      x-eov-operation-handler: controllers/DefaultController
components:
  parameters:
    employeeId:
      description: Employee id
      explode: false
      in: path
      name: employeeId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
  requestBodies:
    employee:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Employee"
      description: Employee
      required: true
  schemas:
    CodebookItem:
      example:
        code: code
        names:
          key: names
        order: 0
      properties:
        code:
          description: Code
          type: string
        names:
          additionalProperties:
            type: string
          description: "Map of (language code, codebook item localization) pairs"
          type: object
        order:
          description: Order of the item within all items of the codebook
          type: integer
      required:
        - code
        - names
        - order
      type: object
    Position:
      enum:
        - SOFTWAREENGINEER
        - TEAMLEAD
        - ENGINEERINGMANAGER
        - HRMANAGER
        - RECRUITER
        - FINANCEMANAGER
        - ACCOUNTANT
        - MARKETINGMANAGER
        - MARKETINGSPECIALIST
        - CEO
      type: string
    Employee:
      description: Employee
      example:
        firstName: firstName
        lastName: lastName
        email: email
        phoneNumber: phoneNumber
        boss: boss
        status: status
        profileImage: profileImage
        year: null
        id: 0
        position: null
      properties:
        id:
          description: Id
          format: int64
          type: integer
        firstName:
          description: First name of the employee
          type: string
        lastName:
          description: Last name of the employee
          type: string
        email:
          description: Email of the employee
          type: string
        phoneNumber:
          description: phoneNumber of the employee
          type: string
        boss:
          description: Boss of the employee
          type: string
        status:
          description: Status of the employee
          type: string
        profileImage:
          description: profileImage of the employee
          type: string
        position:
          $ref: "#/components/schemas/Position"
        department:
          $ref: "#/components/schemas/Department"
      required:
        - firstName
        - position
        - lastName
        - email
        - phoneNumber
        - boss
        - status
        - profileImage
        - department
      type: object
    Department:
      enum:
        - "IT"
        - "HR"
        - "FINANCE"
        - "MARKETING"
        - "BOARD"
      type: string
